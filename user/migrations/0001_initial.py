# Generated by Django 4.1.7 on 2023-03-29 07:01

from django.db import migrations, models
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last name')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=40)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=100)),
                ('profile_picture', models.ImageField(blank=True, default='profile/default_pic.png', null=True, upload_to='profile_images')),
                ('gov_id', models.CharField(blank=True, db_index=True, help_text='Şəxsiyyət vəsiqəsinin nömrəsi', max_length=30, null=True)),
                ('voen_code', models.CharField(blank=True, db_index=True, help_text='Şəxsi VÖEN', max_length=30, null=True, verbose_name='VÖEN Kod')),
                ('client_code', models.CharField(blank=True, db_index=True, editable=False, max_length=30, null=True, unique=True)),
                ('user_choices', models.CharField(choices=[('User', 'User'), ('Company', 'Company')], default='User', max_length=100)),
                ('social_media', models.CharField(blank=True, max_length=100, null=True)),
                ('mail_choices', models.CharField(blank=True, choices=[('Activation notification', 'Activation notification'), ('Decline notification', 'Decline notification')], max_length=100, null=True)),
                ('activation_mail_sent', models.BooleanField(db_index=True, default=False, help_text='It will change after sending activation mail', verbose_name='Activation mail sent')),
                ('decline_mail_sent', models.BooleanField(db_index=True, default=False, help_text='It will change after sending decline mail', verbose_name='Decline mail sent')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_company_active', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='last activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', user.models.MyUserManager()),
            ],
        ),
    ]
